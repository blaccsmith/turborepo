datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token_expires_in Int
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    likedPosts    LikedPosts[]
    comments      Comment[]
    role          Role         @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          Int          @id @default(autoincrement())
    title       String       @db.VarChar(255)
    content     String       @db.Text
    contentHtml String       @db.Text
    slug        String       @unique
    hidden      Boolean      @default(false)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    likedBy     LikedPosts[]
    comments    Comment[]
    tag         Tag?         @relation(fields: [tagId], references: [id])
    tagId       String?

    @@index([authorId])
    @@fulltext([title, content])
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    posts     Post[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LikedPosts {
    post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    postId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId    String
    createdAt DateTime @default(now())

    @@id([postId, userId])
    @@index([postId])
    @@index([userId])
}

model Comment {
    id          Int      @id @default(autoincrement())
    content     String   @db.Text
    contentHtml String   @db.Text
    createdAt   DateTime @default(now())
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      Int
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String

    @@index([authorId])
    @@index([postId])
}
